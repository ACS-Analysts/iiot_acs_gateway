[
    {
        "id": "4c40e56a84788563",
        "type": "tab",
        "label": "PEM-IOT",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9a4d408674b0b920",
        "type": "mqtt in",
        "z": "4c40e56a84788563",
        "name": "From KEPServerEX",
        "topic": "iotgateway",
        "qos": "1",
        "datatype": "json",
        "broker": "06aae9471921be4e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "a2f333d07f9e3457",
                "4fb9a357efc157d0"
            ]
        ]
    },
    {
        "id": "a2f333d07f9e3457",
        "type": "debug",
        "z": "4c40e56a84788563",
        "name": "Raw Input",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "4fb9a357efc157d0",
        "type": "function",
        "z": "4c40e56a84788563",
        "name": "Datalake Parser",
        "func": "//msg.payload.timestamp = (msg.payload.timestamp-(msg.payload.timestamp%1000))/1000;\nvar outputMessages = [];\n\nfor(var index in msg.payload.values){\n    var msgElt = {};\n    msgElt.payload = {};\n\n    var epoch = msg.payload.values[index].t;\n    var epoch_len = ('' + epoch).length;\n    if(epoch_len > 10) {\n        msgElt.payload.t = (epoch-(epoch%1000))/1000;\n    }\n    \n    // tagAttrs assumes a value like the following for the id key\n    // \"CF.CF001.Prgm_Visual_Factory_M1_CF007.VF.Cast_Number.DATA\"\n    var tagAttrs = msg.payload.values[index].id.split('.');\n    //node.warn(tagAttrs);\n\n    msgElt.payload.department = tagAttrs[0];\n    msgElt.payload.device = tagAttrs[1];\n    msgElt.payload.attribute = tagAttrs[4];\n    msgElt.payload.value = msg.payload.values[index].v;\n\n    // This is a workaround since the CH and CF trees are\n    // represented differently in KepServerEX.\n    if(msgElt.payload.device.startsWith(\"Cell\") &&\n       tagAttrs[2].startsWith(\"Prgm_\")) {\n        const item2Arr = tagAttrs[2].split(\"_\");\n        msgElt.payload.device = item2Arr[item2Arr.length-1];\n    } else if(msgElt.payload.device.startsWith(\"Cell\")) {\n        msgElt.payload.device = tagAttrs[2];\n        msgElt.payload.attribute = tagAttrs[3];\n    }\n\n\n    if(tagAttrs[5] != \"LEN\")\n    {\n        msgElt.topic = \"galway/edge/\" + tagAttrs[0] + \"/\" + tagAttrs[1];\n        outputMessages.push(msgElt);\n    }\n}\n\nreturn [outputMessages];  ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "2071f3358f470ff6",
                "def3083141594d77"
            ]
        ]
    },
    {
        "id": "2071f3358f470ff6",
        "type": "debug",
        "z": "4c40e56a84788563",
        "name": "DL Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "def3083141594d77",
        "type": "mqtt out",
        "z": "4c40e56a84788563",
        "name": "To IoT Core",
        "topic": "galway/edge/message",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "93bb860e880be2e1",
        "x": 830,
        "y": 280,
        "wires": []
    },
    {
        "id": "06aae9471921be4e",
        "type": "mqtt-broker",
        "name": "(Local) MQTT Broker",
        "broker": "10.16.3.199",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "93bb860e880be2e1",
        "type": "mqtt-broker",
        "name": "mqtt_broker_dev",
        "broker": "a1mxujejfvl7r9-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "740f23bb402b29ba",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "740f23bb402b29ba",
        "type": "tls-config",
        "name": "mqtt_broker_dev_certs",
        "cert": "/data/certs/certificate.pem",
        "key": "/data/certs/private.key",
        "ca": "/data/certs/AmazonRootCA1.pem",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
